generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  password    String?
  name        String?
  role        UserRole     @default(User)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  accounts    Account[]
  chatThreads ChatThread[]
  messages    Message[]
  sessions    Session[]

  @@index([email])
  @@index([role])
  @@index([createdAt])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model ChatThread {
  id        String    @id @default(cuid())
  title     String?
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@index([userId])
  @@index([updatedAt])
  @@index([createdAt])
  @@map("chat_threads")
}

model Message {
  id        String        @id @default(cuid())
  content   String
  role      MessageRole
  kind      String?
  threadId  String
  userId    String
  createdAt DateTime      @default(now())
  files     MessageFile[]
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread    ChatThread    @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId])
  @@index([userId])
  @@index([createdAt])
  @@index([role])
  @@index([kind])
  @@map("messages")
}

model MessageFile {
  id        String   @id @default(cuid())
  messageId String
  fileName  String
  fileSize  Int
  fileType  String
  fileUrl   String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([fileType])
  @@map("message_files")
}

enum UserRole {
  User
  Admin
}

enum MessageRole {
  user
  assistant
  system
}
